package com.steinschen.main;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Board extends GameObject{
	
	private Handler handler;
	
	private Stone stone;
	
	private int field[][] = new int[2][8];
	private int field2[][] = new int[2][8];
	
	private int amount;
	
	private int amountField[] = new int[8];
	private int amountField2[] = new int[8];
	
	private boolean gameOver=false;
	
	private BufferedImage boardImage;
	
	Font sharonsHand;
	
	public Board(int x, int y, ID id, Handler handler) {
		super(x, y, id);
		
		this.handler = handler;
		
		SpriteSheet ss = new SpriteSheet(Game.spriteSheet);
		
		boardImage = ss.grabImage(5, 1, 960, 576);
		
		try {
			sharonsHand = Font.createFont(Font.TRUETYPE_FONT, new File("sharonshand.ttf")).deriveFont(35f);
			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, new File("sharonshand.ttf")));
			
		} catch(IOException | FontFormatException e) {
			
		}
		
		for(int i=0; i<8; i++) {
			for(int j=0; j<2; j++) {
				field[j][i]=2;
				field2[j][i]=2;
			}
		}
	}
	
	public void tick() {
		
	}
	
	public void render(Graphics g) {
		
		Font fnt = new Font("arial", 1, 15);
		
		g.drawImage(boardImage, 73, 100, null);
		
		g.setColor(Color.black);
		g.setFont(sharonsHand);
		
		g.drawString(String.valueOf(field2[0][0]), 170, 250);
		g.drawString(String.valueOf(field2[0][1]), 276, 234);
		g.drawString(String.valueOf(field2[0][2]), 382, 225);
		g.drawString(String.valueOf(field2[0][3]), 487, 220);
		g.drawString(String.valueOf(field2[0][4]), 592, 219);
		g.drawString(String.valueOf(field2[0][5]), 690, 221);
		g.drawString(String.valueOf(field2[0][6]), 795, 230);
		g.drawString(String.valueOf(field2[0][7]), 895, 241);
		
		g.drawString(String.valueOf(field2[1][0]), 162, 342);
		g.drawString(String.valueOf(field2[1][1]), 270, 335);
		g.drawString(String.valueOf(field2[1][2]), 380, 326);
		g.drawString(String.valueOf(field2[1][3]), 485, 320);
		g.drawString(String.valueOf(field2[1][4]), 594, 320);
		g.drawString(String.valueOf(field2[1][5]), 701, 320);
		g.drawString(String.valueOf(field2[1][6]), 799, 327);
		g.drawString(String.valueOf(field2[1][7]), 899, 336);
		
		g.drawString(String.valueOf(field[1][0]), 156, 492);
		g.drawString(String.valueOf(field[1][1]), 263, 496);
		g.drawString(String.valueOf(field[1][2]), 370, 505);
		g.drawString(String.valueOf(field[1][3]), 485, 505);
		g.drawString(String.valueOf(field[1][4]), 592, 503);
		g.drawString(String.valueOf(field[1][5]), 700, 501);
		g.drawString(String.valueOf(field[1][6]), 806, 496);
		g.drawString(String.valueOf(field[1][7]), 912, 485);
		
		g.drawString(String.valueOf(field[0][0]), 177, 582);
		g.drawString(String.valueOf(field[0][1]), 280, 596);
		g.drawString(String.valueOf(field[0][2]), 382, 600);
		g.drawString(String.valueOf(field[0][3]), 480, 606);
		g.drawString(String.valueOf(field[0][4]), 587, 608);
		g.drawString(String.valueOf(field[0][5]), 690, 602);
		g.drawString(String.valueOf(field[0][6]), 792, 600);
		g.drawString(String.valueOf(field[0][7]), 889, 590);
		
	}
	
	
	public void clearBoard() {
		
		for(int i=0; i<8; i++) {
			for(int j=0; j<2; j++) {
				field[j][i]=2;
				field2[j][i]=2;
			}
		}
	}
	
	
	public int[][] getField() {
		return field;
	}

	public void setField(int[][] field) {
		this.field = field;
	}

	public int[][] getField2() {
		return field2;
	}

	public void setField2(int[][] field2) {
		this.field2 = field2;
	}
	
	public int getAmount(int y, int x, int fieldSide) {
		if(fieldSide==1) {
			amount=field[y][x];
		}
		if(fieldSide==2) {
			amount=field2[y][x];
		}
		return amount;
	}
	
	public void setAmount(int y, int x, int fieldSide, int amount) {
		this.amount=amount;
		if(fieldSide==1) {
			field[y][x]=amount;
		}
		if(fieldSide==2) {
			field2[y][x]=amount;
		}
	}
	
	public boolean checkForLoss(int fieldSide) {
		
		int amount[] = new int[8];
		boolean loss=false;
		
		
		if(fieldSide==1) {
			for(int i=0; i<8; i++) {
				amount[i]=field[1][i];
			}
		}
		if(fieldSide==2) {
			for(int i=0; i<8; i++) {
				amount[i]=field2[1][i];
			}
		}
		
		if(amount[0]==0 && amount[1]==0 && amount[2]==0 && amount[3]==0 && amount[4]==0 && amount[5]==0 && amount[6]==0 && amount[7]==0) loss=true;
		System.out.println("GAME LOST: " +loss);
		
		return loss;
	}
}
